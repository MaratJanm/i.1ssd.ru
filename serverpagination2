from flask import Flask, request, jsonify, render_template
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime, timedelta
import os

app = Flask(__name__)

# Указание полного пути к базе данных
db_path = os.path.join(os.path.dirname(__file__), 'temperatures.db')
app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{db_path}'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

class Temperature(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    computer_name = db.Column(db.String(50), nullable=False)
    disk = db.Column(db.String(50), nullable=False)
    temperature = db.Column(db.Float, nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    parameter241 = db.Column(db.String(50), nullable=True)

    def __repr__(self):
        return f"<Temperature {self.computer_name} - {self.disk} - {self.temperature}°C - {self.parameter241}>"

# Индексация базы данных для ускорения поиска
db.Index('idx_timestamp', Temperature.timestamp)
db.Index('idx_computer_disk', Temperature.computer_name, Temperature.disk)

@app.route('/temperatures', methods=['POST'])
def add_temperature():
    # Ваш код для добавления температуры
    pass

@app.route('/api/temperatures', methods=['GET'])
def get_temperatures():
    try:
        # Параметры пагинации
        page = int(request.args.get('page', 1))
        per_page = int(request.args.get('per_page', 50))
        offset = (page - 1) * per_page

        # Запрос с ограничением по количеству записей (пагинация)
        query = Temperature.query.order_by(Temperature.timestamp.desc()).offset(offset).limit(per_page).all()

        result = [
            {
                "computer_name": temp.computer_name,
                "disk": temp.disk,
                "temperature": temp.temperature,
                "timestamp": temp.timestamp,
                "parameter241": temp.parameter241
            }
            for temp in query
        ]
        return jsonify(result)
    except Exception as e:
        print(f"Ошибка при получении данных: {e}")
        return jsonify({"message": "Internal Server Error"}), 500

@app.route('/api/disk/<computer_name>/<disk_name>', methods=['GET'])
def get_disk_data(computer_name, disk_name):
    try:
        temperatures = Temperature.query.filter_by(computer_name=computer_name, disk=disk_name).order_by(Temperature.timestamp.desc()).all()
        result = [
            {
                "timestamp": temp.timestamp,
                "temperature": temp.temperature,
                "parameter241": temp.parameter241
            }
            for temp in temperatures
        ]
        return jsonify(result)
    except Exception as e:
        print(f"Ошибка при получении данных для диска: {e}")
        return jsonify({"message": "Internal Server Error"}), 500

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/disk/<computer_name>/<disk_name>')
def disk(computer_name, disk_name):
    return render_template('disk.html')

if __name__ == "__main__":
    try:
        with app.app_context():
            db.create_all()  # Создание таблиц, если они не существуют
            print("Таблицы проверены и созданы при необходимости.")
    except Exception as e:
        print(f"Ошибка при создании таблиц: {e}")
    app.run(host='0.0.0.0', port=8000)
