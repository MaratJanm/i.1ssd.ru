<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Температуры дисков</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f2f5;
            margin: 0;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: #ffffff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            position: relative;
        }
        .download-link {
            position: absolute;
            top: 20px;
            right: 20px;
            color: #007bff;
            text-decoration: underline;
            font-size: 16px;
            cursor: pointer;
        }
        .computer {
            margin-bottom: 20px;
        }
        .computer h2 {
            font-size: 24px;
            color: #333333;
            border-bottom: 2px solid #007bff;
            padding-bottom: 5px;
        }
        .disk {
            display: flex;
            margin-bottom: 20px;
            align-items: flex-start;
        }
        .chart-container {
            flex: 2;
            position: relative;
            height: 200px;
        }
        .input-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
            margin-left: 20px;
        }
        .input-container label {
            font-size: 14px;
            margin-bottom: 4px;
            color: #333;
        }
        .input-container input[type="text"], 
        .input-container textarea {
            width: 100%;
            padding: 6px;
            font-size: 14px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }
        .input-container textarea {
            height: 50px;
            resize: none;
        }
        .current-temperature {
            font-size: 18px;
            color: #333333;
            margin-bottom: 10px;
        }
        @media (max-width: 768px) {
            .download-link {
                position: static;
                display: block;
                margin: 10px auto;
                width: 80%;
                text-align: center;
            }
            .disk {
                flex-direction: column;
            }
            .input-container {
                margin-left: 0;
            }
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/date-fns"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
</head>
<body>
    <div class="container">
        <a href="/download" class="download-link">Скачать клиент</a>
        <div id="computers"></div>
    </div>
    <script>
        const charts = {};

        async function fetchTemperatures() {
            try {
                const response = await fetch('/api/temperatures');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                return data;
            } catch (error) {
                console.error("Error fetching temperatures:", error);
                return [];
            }
        }

        function groupByComputer(data) {
            const grouped = {};
            data.forEach(item => {
                if (!grouped[item.computer_name]) {
                    grouped[item.computer_name] = {};
                }
                if (!grouped[item.computer_name][item.disk]) {
                    grouped[item.computer_name][item.disk] = [];
                }
                grouped[item.computer_name][item.disk].push(item);
            });
            return grouped;
        }

        function createChart(ctx, data) {
            return new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.map(item => new Date(item.timestamp)),
                    datasets: [{
                        label: 'Parameter 241',
                        data: data.map(item => parseFloat(item.parameter241)),
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1,
                        fill: false
                    }]
                },
                options: {
                    animation: true,
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'minute'
                            }
                        },
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function updateChart(chart, data) {
            chart.data.labels = data.map(item => new Date(item.timestamp));
            chart.data.datasets[0].data = data.map(item => parseFloat(item.parameter241));
            chart.update();
        }

        async function updateData() {
            const temperatures = await fetchTemperatures();
            if (temperatures.length === 0) {
                console.warn("No temperature data available.");
                return;
            }
            const groupedData = groupByComputer(temperatures);
            const container = document.getElementById('computers');
            container.innerHTML = ''; 

            Object.keys(groupedData).forEach(computerName => {
                let computerDiv = document.querySelector(`.computer[data-computer-name="${computerName}"]`);
                if (!computerDiv) {
                    computerDiv = document.createElement('div');
                    computerDiv.className = 'computer';
                    computerDiv.setAttribute('data-computer-name', computerName);
                    const computerTitle = document.createElement('h2');
                    computerTitle.textContent = `Компьютер: ${computerName}`;
                    computerDiv.appendChild(computerTitle);
                    container.appendChild(computerDiv);
                }

                Object.keys(groupedData[computerName]).forEach(diskName => {
                    const diskData = groupedData[computerName][diskName];
                    const latestData = diskData[0];

                    let diskDiv = computerDiv.querySelector(`.disk[data-disk-name="${diskName}"]`);
                    if (!diskDiv) {
                        diskDiv = document.createElement('div');
                        diskDiv.className = 'disk';
                        diskDiv.setAttribute('data-disk-name', diskName);

                        const chartContainer = document.createElement('div');
                        chartContainer.className = 'chart-container';
                        const canvas = document.createElement('canvas');
                        chartContainer.appendChild(canvas);
                        diskDiv.appendChild(chartContainer);

                        const inputContainer = document.createElement('div');
                        inputContainer.className = 'input-container';

                        const tbwLabel = document.createElement('label');
                        tbwLabel.textContent = 'TBW:';
                        inputContainer.appendChild(tbwLabel);

                        const tbwInput = document.createElement('input');
                        tbwInput.type = 'text';
                        tbwInput.value = latestData.TBW || ''; 
                        tbwInput.addEventListener('change', () => {
                            saveField(computerName, diskName, 'TBW', tbwInput.value);
                        });
                        inputContainer.appendChild(tbwInput);

                        const commentLabel = document.createElement('label');
                        commentLabel.textContent = 'Комментарий:';
                        inputContainer.appendChild(commentLabel);

                        const commentTextarea = document.createElement('textarea');
                        commentTextarea.value = latestData.comment || ''; 
                        commentTextarea.addEventListener('change', () => {
                            saveField(computerName, diskName, 'comment', commentTextarea.value);
                        });
                        inputContainer.appendChild(commentTextarea);

                        diskDiv.appendChild(inputContainer);
                        computerDiv.appendChild(diskDiv);

                        charts[`${computerName}-${diskName}`] = createChart(canvas, diskData);
                    } else {
                        const chart = charts[`${computerName}-${diskName}`];
                        updateChart(chart, diskData);

                        const tbwInput = diskDiv.querySelector('input[type="text"]');
                        const commentTextarea = diskDiv.querySelector('textarea');
                        tbwInput.value = latestData.TBW || '';
                        commentTextarea.value = latestData.comment || '';
                    }
                });
            });
        }

        async function saveField(computerName, diskName, fieldName, fieldValue) {
            try {
                const response = await fetch(`/api/save`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        computer_name: computerName,
                        disk_name: diskName,
                        field_name: fieldName,
                        field_value: fieldValue
                    }),
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
            } catch (error) {
                console.error("Error saving field:", error);
            }
        }

        updateData();
        setInterval(updateData, 60000); // Обновление данных каждую минуту
    </script>
</body>
</html>
