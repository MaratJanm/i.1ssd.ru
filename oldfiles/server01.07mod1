from flask_migrate import Migrate
from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime, timedelta
import os

app = Flask(__name__)

# Указание полного пути к базе данных
db_path = os.path.join(os.path.dirname(__file__), 'temperatures.db')
app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{db_path}'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
migrate = Migrate(app, db)

class temperature(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    computer_name = db.Column(db.String(50), nullable=False)
    disk = db.Column(db.String(50), nullable=False)
    temperature = db.Column(db.Float, nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    parameter241 = db.Column(db.String(50), nullable=True)
    parameter243 = db.Column(db.String(50), nullable=True)
    parameter228 = db.Column(db.String(50), nullable=True)
    parameter005 = db.Column(db.String(50), nullable=True)
    parameter009 = db.Column(db.String(50), nullable=True)
    parameter170 = db.Column(db.String(50), nullable=True)
    parameter174 = db.Column(db.String(50), nullable=True)
    parameter184 = db.Column(db.String(50), nullable=True)
    parameter187 = db.Column(db.String(50), nullable=True)
    parameter194 = db.Column(db.String(50), nullable=True)
    parameter192 = db.Column(db.String(50), nullable=True)
    parameter199 = db.Column(db.String(50), nullable=True)
    parameter197 = db.Column(db.String(50), nullable=True)

    def __repr__(self):
        return f"<temperature {self.computer_name} - {self.disk} - {self.temperature}°C>"
		
@app.route('/api/update_field', methods=['POST'])
def update_field():
    try:
        data = request.get_json()
        if data is None:
            return jsonify({"message": "Invalid data"}), 400
        computer_name = data.get('computer_name')
        disk = data.get('disk')
        field = data.get('field')
        value = data.get('value')
        if not computer_name or not disk or not field:
            return jsonify({"message": "Invalid data"}), 400

        # Обновление записи в базе данных
        temp_record = temperature.query.filter_by(computer_name=computer_name, disk=disk).order_by(temperature.timestamp.desc()).first()
        if temp_record:
            setattr(temp_record, field, value)
            db.session.commit()
            return jsonify({"message": "Field updated successfully"}), 200
        else:
            return jsonify({"message": "Record not found"}), 404
    except Exception as e:
        print(f"Ошибка при обновлении поля: {e}")
        return jsonify({"message": "Internal Server Error"}), 500
		
@app.route('/temperatures', methods=['POST'])
def add_temperature():
    try:
        data = request.get_json()
        if data is None:
            return jsonify({"message": "Invalid data"}), 400
        computer_name = data.get('computer_name')
        temperatures = data.get('temperatures')
        if not computer_name or not temperatures:
            return jsonify({"message": "Invalid data"}), 400

        for item in temperatures:
            disk = item['disk']
            new_temp = item['temperature']
            parameters = item.get('parameters', {})
            TWB = item.get('TWB', None)  # Получение TWB
            comment = item.get('comment', None)  # Получение comment

            # Получение последней записи температуры для данного диска
            last_temp_record = temperature.query.filter_by(computer_name=computer_name, disk=disk).order_by(temperature.timestamp.desc()).first()

            if last_temp_record:
                time_diff = datetime.utcnow() - last_temp_record.timestamp
                temp_diff = abs(new_temp - last_temp_record.temperature)

                # Проверка разницы температуры и времени
                if time_diff < timedelta(minutes=1) and temp_diff > 20:
                    print(f"Игнорирование температуры для {disk} на {computer_name}: {new_temp}°C (разница {temp_diff}°C за {time_diff.seconds} секунд)")
                    continue

            # Добавление новой записи температуры
            new_temp_record = temperature(
                computer_name=computer_name,
                disk=disk,
                temperature=new_temp,
                parameter241=str(parameters.get('241', "-")),
                parameter243=str(parameters.get('243', "-")),
                parameter228=str(parameters.get('228', "-")),
                parameter005=str(parameters.get('005', "-")),
                parameter009=str(parameters.get('009', "-")),
                parameter170=str(parameters.get('170', "-")),
                parameter174=str(parameters.get('174', "-")),
                parameter184=str(parameters.get('184', "-")),
                parameter187=str(parameters.get('187', "-")),
                parameter194=str(parameters.get('194', "-")),
                parameter192=str(parameters.get('192', "-")),
                parameter199=str(parameters.get('199', "-")),
                parameter197=str(parameters.get('197', "-")),
                TWB=TWB,
                comment=comment
            )
            db.session.add(new_temp_record)

        db.session.commit()
        return jsonify({"message": "Данные успешно добавлены"}), 200
    except Exception as e:
        print(f"Ошибка при добавлении данных: {e}")
        return jsonify({"message": "Internal Server Error"}), 500

@app.route('/api/temperatures', methods=['GET'])
def get_temperatures():
    try:
        subquery = db.session.query(
            temperature.computer_name,
            temperature.disk,
            db.func.row_number().over(
                partition_by=[temperature.computer_name, temperature.disk],
                order_by=temperature.timestamp.desc()
            ).label('row_num'),
            temperature
        ).subquery()

        query = db.session.query(subquery).filter(subquery.c.row_num <= 100).all()

        result = [
            {
                "computer_name": temp.computer_name,
                "disk": temp.disk,
                "temperature": temp.temperature,
                "timestamp": temp.timestamp,
                "parameters": {
                    "241": temp.parameter241,
                    "243": temp.parameter243,
                    "228": temp.parameter228,
                    "005": temp.parameter005,
                    "009": temp.parameter009,
                    "170": temp.parameter170,
                    "174": temp.parameter174,
                    "184": temp.parameter184,
                    "187": temp.parameter187,
                    "194": temp.parameter194,
                    "192": temp.parameter192,
                    "199": temp.parameter199,
                    "197": temp.parameter197
                }
            }
            for temp in query
        ]
        print(result)  # Добавлен вывод данных для диагностики
        return jsonify(result)
    except Exception as e:
        print(f"Ошибка при получении данных: {e}")
        return jsonify({"message": "Internal Server Error"}), 500

@app.route('/api/disk/<computer_name>/<disk_name>', methods=['GET'])
def get_disk_data(computer_name, disk_name):
    try:
        temperatures = temperature.query.filter_by(computer_name=computer_name, disk=disk_name).order_by(temperature.timestamp.desc()).all()
        result = [
            {
                "timestamp": temp.timestamp,
                "temperature": temp.temperature,
                "parameters": {
                    "241": temp.parameter241,
                    "243": temp.parameter243,
                    "228": temp.parameter228,
                    "005": temp.parameter005,
                    "009": temp.parameter009,
                    "170": temp.parameter170,
                    "174": temp.parameter174,
                    "184": temp.parameter184,
                    "187": temp.parameter187,
                    "194": temp.parameter194,
                    "192": temp.parameter192,
                    "199": temp.parameter199,
                    "197": temp.parameter197
                }
            }
            for temp in temperatures
        ]
        return jsonify(result)
    except Exception as e:
        print(f"Ошибка при получении данных для диска: {e}")
        return jsonify({"message": "Internal Server Error"}), 500

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/disk/<computer_name>/<disk_name>')
def disk(computer_name, disk_name):
    return render_template('disk.html')

@app.route('/download')
def download_client():
    try:
        return send_from_directory(directory=os.path.dirname(__file__), path='client.zip', as_attachment=True)
    except Exception as e:
        print(f"Ошибка при скачивании файла: {e}")
        return jsonify({"message": "File not found"}), 404

if __name__ == "__main__":
    try:
        with app.app_context():
            db.create_all()  # Убедимся, что таблицы созданы
            print("Таблицы проверены и созданы при необходимости.")
    except Exception as e:
        print(f"Ошибка при создании таблиц: {e}")
    app.run(host='0.0.0.0', port=8000)
