from flask import Flask, render_template
from flask_sqlalchemy import SQLAlchemy
import matplotlib.pyplot as plt
import io
import base64
import pandas as pd
import os
from datetime import datetime

app = Flask(__name__)

# Указание полного пути к базе данных
db_path = os.path.join(os.path.dirname(__file__), 'temperatures.db')
app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{db_path}'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

class Temperature(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    computer_name = db.Column(db.String(50), nullable=False)
    disk = db.Column(db.String(50), nullable=False)
    temperature = db.Column(db.Float, nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    parameter241 = db.Column(db.String(50), nullable=True)
    # остальные параметры опущены для краткости

@app.route('/')
def index():
    try:
        # Получение данных из базы данных
        data = Temperature.query.order_by(Temperature.timestamp).all()
        if not data:
            return "No data found."

        # Преобразование данных в DataFrame
        df = pd.DataFrame([{
            'timestamp': d.timestamp,
            'parameter241': d.parameter241
        } for d in data])

        # Очистка данных
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        df['parameter241'] = pd.to_numeric(df['parameter241'], errors='coerce')
        df.dropna(subset=['parameter241'], inplace=True)

        # Построение графика
        plt.figure(figsize=(10, 5))
        plt.plot(df['timestamp'], df['parameter241'], marker='o', linestyle='-', color='b')
        plt.xlabel('Timestamp')
        plt.ylabel('Parameter 241')
        plt.title('Parameter 241 Over Time')
        plt.grid(True)
        plt.xticks(rotation=45)
        plt.tight_layout()

        # Сохранение графика в изображение PNG в памяти
        img = io.BytesIO()
        plt.savefig(img, format='png')
        img.seek(0)
        img_base64 = base64.b64encode(img.getvalue()).decode('utf-8')

        return render_template('index.html', img_data=img_base64)
    except Exception as e:
        return f"An error occurred: {e}"

if __name__ == '__main__':
    app.run(debug=True)
