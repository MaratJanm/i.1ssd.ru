<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Температуры дисков</title>
    <link rel="stylesheet" href="style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/date-fns"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
</head>
<body>
    <div class="container">
        <a href="/download" class="download-link">Скачать клиент</a>
        <div id="computers"></div>
    </div>
    <script>
        const charts = {};

        async function fetchTemperatures() {
            try {
                const response = await fetch('/api/temperatures');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                return data;
            } catch (error) {
                console.error("Error fetching temperatures:", error);
                return [];
            }
        }

        function groupByComputer(data) {
            const grouped = {};
            data.forEach(item => {
                if (!grouped[item.computer_name]) {
                    grouped[item.computer_name] = {};
                }
                if (!grouped[item.computer_name][item.disk]) {
                    grouped[item.computer_name][item.disk] = [];
                }
                grouped[item.computer_name][item.disk].push(item);
            });
            return grouped;
        }

        function createChart(ctx, data) {
            return new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.map(item => new Date(item.timestamp)),
                    datasets: [{
                        label: 'Температура (°C)',
                        data: data.map(item => item.temperature),
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 2, // Ширина линии
                        fill: false
                    }]
                },
                options: {
                    animation: {
                        duration: 1000 // Анимация при создании и обновлении графиков
                    },
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'minute'
                            },
                            ticks: {
                                color: '#555555' // Цвет подписей на оси X
                            },
                            title: {
                                display: true,
                                text: 'Время',
                                color: '#333333',
                                font: {
                                    size: 14
                                }
                            }
                        },
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: '#555555' // Цвет подписей на оси Y
                            },
                            title: {
                                display: true,
                                text: 'Температура (°C)',
                                color: '#333333',
                                font: {
                                    size: 14
                                }
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top',
                            labels: {
                                color: '#333333'
                            }
                        }
                    }
                }
            });
        }

        function updateChart(chart, data) {
            chart.data.labels = data.map(item => new Date(item.timestamp));
            chart.data.datasets[0].data = data.map(item => item.temperature);
            chart.update();
        }

        async function updateData() {
            const temperatures = await fetchTemperatures();
            if (temperatures.length === 0) {
                console.warn("No temperature data available.");
                return;
            }
            const groupedData = groupByComputer(temperatures);
            const container = document.getElementById('computers');
            container.innerHTML = ''; // Очистка контейнера перед обновлением

            Object.keys(groupedData).forEach(computerName => {
                let computerDiv = document.querySelector(`.computer[data-computer-name="${computerName}"]`);
                if (!computerDiv) {
                    computerDiv = document.createElement('div');
                    computerDiv.className = 'computer';
                    computerDiv.setAttribute('data-computer-name', computerName);
                    const computerTitle = document.createElement('h2');
                    computerTitle.textContent = `Компьютер: ${computerName}`;
                    computerDiv.appendChild(computerTitle);
                    container.appendChild(computerDiv);
                }

                Object.keys(groupedData[computerName]).forEach(diskName => {
                    const diskData = groupedData[computerName][diskName];
                    const latestData = diskData[0];

                    let diskDiv = computerDiv.querySelector(`.disk[data-disk-name="${diskName}"]`);
                    if (!diskDiv) {
                        diskDiv = document.createElement('div');
                        diskDiv.className = 'disk';
                        diskDiv.setAttribute('data-disk-name', diskName);

                        const diskHeader = document.createElement('div');
                        diskHeader.className = 'disk-header';

                        const diskTitle = document.createElement('span');
                        diskTitle.textContent = `Диск: ${diskName}`;
                        diskTitle.addEventListener('click', () => {
                            window.location.href = `/disk/${computerName}/${diskName}`;
                        });
                        diskHeader.appendChild(diskTitle);

                        const currentTemp = document.createElement('div');
                        currentTemp.className = 'current-temperature';
                        currentTemp.textContent = `Текущая температура: ${latestData.temperature}°C`;
                        diskHeader.appendChild(currentTemp);

                        diskDiv.appendChild(diskHeader);

                        const chartContainer = document.createElement('div');
                        chartContainer.className = 'chart-container';
                        const canvas = document.createElement('canvas');
                        chartContainer.appendChild(canvas);
                        diskDiv.appendChild(chartContainer);

                        const inputContainer = document.createElement('div');
                        inputContainer.className = 'input-container';

                        const twbLabel = document.createElement('label');
                        twbLabel.textContent = 'TWB:';
                        inputContainer.appendChild(twbLabel);

                        const twbInput = document.createElement('input');
                        twbInput.type = 'text';
                        twbInput.value = latestData.TWB || ''; // Заполнение значением из базы данных
                        twbInput.addEventListener('change', () => {
                            saveField(computerName, diskName, 'TWB', twbInput.value);
                        });
                        inputContainer.appendChild(twbInput);

                        const commentLabel = document.createElement('label');
                        commentLabel.textContent = 'Комментарий:';
                        inputContainer.appendChild(commentLabel);

                        const commentTextarea = document.createElement('textarea');
                        commentTextarea.value = latestData.comment || ''; // Заполнение значением из базы данных
                        commentTextarea.addEventListener('change', () => {
                            saveField(computerName, diskName, 'comment', commentTextarea.value);
                        });
                        inputContainer.appendChild(commentTextarea);

                        diskDiv.appendChild(inputContainer);

                        computerDiv.appendChild(diskDiv);

                        charts[`${computerName}-${diskName}`] = createChart(canvas, diskData);
                    } else {
                        const currentTemp = diskDiv.querySelector('.current-temperature');
                        currentTemp.textContent = `Текущая температура: ${latestData.temperature}°C`;

                        const twbInput = diskDiv.querySelector('input[type="text"]');
                        twbInput.value = latestData.TWB || '';

                        const commentTextarea = diskDiv.querySelector('textarea');
                        commentTextarea.value = latestData.comment || '';

                        const chart = charts[`${computerName}-${diskName}`];
                        updateChart(chart, diskData);
                    }
                });
            });
        }

        async function saveField(computerName, diskName, field, value) {
            try {
                const response = await fetch(`/api/update_field`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ computer_name: computerName, disk: diskName, field, value })
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const result = await response.json();
                console.log("Field updated:", result);
            } catch (error) {
                console.error("Error updating field:", error);
            }
        }

        // Обновляем данные только при загрузке страницы
        updateData();
    </script>
</body>
</html>
