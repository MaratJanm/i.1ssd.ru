from flask_migrate import Migrate
from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime, timedelta
import os

app = Flask(__name__)

# Указание полного пути к базе данных
db_path = os.path.join(os.path.dirname(__file__), 'temperatures.db')
app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{db_path}'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
migrate = Migrate(app, db)

class Temperature(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    computer_name = db.Column(db.String(50), nullable=False)
    disk = db.Column(db.String(50), nullable=False)
    temperature = db.Column(db.Float, nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    parameter241 = db.Column(db.String(50), nullable=True)
    parameter243 = db.Column(db.String(50), nullable=True)
    parameter228 = db.Column(db.String(50), nullable=True)
    parameter005 = db.Column(db.String(50), nullable=True)
    parameter009 = db.Column(db.String(50), nullable=True)
    parameter170 = db.Column(db.String(50), nullable=True)
    parameter174 = db.Column(db.String(50), nullable=True)
    parameter184 = db.Column(db.String(50), nullable=True)
    parameter187 = db.Column(db.String(50), nullable=True)
    parameter194 = db.Column(db.String(50), nullable=True)
    parameter192 = db.Column(db.String(50), nullable=True)
    parameter199 = db.Column(db.String(50), nullable=True)
    parameter197 = db.Column(db.String(50), nullable=True)

    def __repr__(self):
        return f"<Temperature {self.computer_name} - {self.disk} - {self.temperature}°C>"

@app.route('/api/disk/<computer_name>/<disk_name>', methods=['GET'])
def get_disk_data(computer_name, disk_name):
    try:
        print(f"Fetching data for computer: {computer_name}, disk: {disk_name}")
        temperatures = Temperature.query.filter_by(computer_name=computer_name, disk=disk_name).order_by(Temperature.timestamp.desc()).all()
        if not temperatures:
            print(f"No data found for computer: {computer_name}, disk: {disk_name}")
            return jsonify([])

        result = [
            {
                "timestamp": temp.timestamp,
                "temperature": temp.temperature,
                "parameters": {
                    "241": temp.parameter241,
                    "243": temp.parameter243,
                    "228": temp.parameter228,
                    "005": temp.parameter005,
                    "009": temp.parameter009,
                    "170": temp.parameter170,
                    "174": temp.parameter174,
                    "184": temp.parameter184,
                    "187": temp.parameter187,
                    "194": temp.parameter194,
                    "192": temp.parameter192,
                    "199": temp.parameter199,
                    "197": temp.parameter197
                }
            }
            for temp in temperatures
        ]
        print(f"Data for computer: {computer_name}, disk: {disk_name} - {result}")
        return jsonify(result)
    except Exception as e:
        print(f"Error fetching data for disk: {e}")
        return jsonify({"message": "Internal Server Error"}), 500

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/disk/<computer_name>/<disk_name>')
def disk(computer_name, disk_name):
    return render_template('disk.html')

@app.route('/download')
def download_client():
    try:
        return send_from_directory(directory=os.path.dirname(__file__), path='client.zip', as_attachment=True)
    except Exception as e:
        print(f"Error downloading file: {e}")
        return jsonify({"message": "File not found"}), 404

if __name__ == "__main__":
    try:
        with app.app_context():
            db.create_all()  # Убедимся, что таблицы созданы
            print("Таблицы проверены и созданы при необходимости.")
    except Exception as e:
        print(f"Error creating tables: {e}")
    app.run(host='0.0.0.0', port=8000)
