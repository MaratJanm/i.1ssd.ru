from flask import Flask, jsonify, request
import psycopg2
from psycopg2 import sql

app = Flask(__name__)

# Функция для подключения к базе данных PostgreSQL
def get_db_connection():
    conn = psycopg2.connect(
        dbname='temperatures',
        user='your_user',       # Замените на ваше имя пользователя
        password='your_password', # Замените на ваш пароль
        host='localhost'
    )
    return conn

@app.route('/api/temperatures', methods=['GET'])
def get_temperatures():
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        # Выполнение SQL-запроса
        cur.execute("SELECT * FROM temperatures ORDER BY timestamp DESC")
        rows = cur.fetchall()
        # Преобразование данных в формат JSON
        result = [
            {
                'timestamp': row[0],
                'temperature': row[1],
                'parameter_241': row[2]
            }
            for row in rows
        ]
        return jsonify(result)
    except Exception as e:
        return jsonify({'message': f'Internal Server Error: {str(e)}'}), 500
    finally:
        cur.close()
        conn.close()

@app.route('/api/additionalinfo/<computer_name>/<disk_name>', methods=['GET'])
def additional_info(computer_name, disk_name):
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        # Выполнение SQL-запроса
        cur.execute(
            sql.SQL("SELECT tbw, comment FROM additionalinfo WHERE computer_name = %s AND disk = %s"),
            (computer_name, disk_name)
        )
        result = cur.fetchone()
        if result:
            tbw, comment = result
            return jsonify({'tbw': tbw, 'comment': comment})
        else:
            return jsonify({'tbw': None, 'comment': None})
    except Exception as e:
        return jsonify({'message': f'Internal Server Error: {str(e)}'}), 500
    finally:
        cur.close()
        conn.close()

@app.route('/api/save', methods=['POST'])
def save_field():
    data = request.json
    computer_name = data.get('computer_name')
    disk_name = data.get('disk_name')
    field_name = data.get('field_name')
    field_value = data.get('field_value')

    conn = get_db_connection()
    cur = conn.cursor()
    try:
        # Обновление данных в таблице additionalinfo
        cur.execute(
            sql.SQL("UPDATE additionalinfo SET {} = %s WHERE computer_name = %s AND disk = %s").format(
                sql.Identifier(field_name)
            ),
            (field_value, computer_name, disk_name)
        )
        conn.commit()
        return jsonify({'message': 'Data saved successfully'})
    except Exception as e:
        return jsonify({'message': f'Internal Server Error: {str(e)}'}), 500
    finally:
        cur.close()
        conn.close()

if __name__ == '__main__':
    app.run(debug=True)
