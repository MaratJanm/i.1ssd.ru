from flask import Flask, request, jsonify, render_template
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime, timedelta

app = Flask(__name__)

# Конфигурация для подключения к PostgreSQL
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://postgres:12345678@localhost:5432/temperatures'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# Модель для хранения данных о температуре и параметрах диска
class Temperature(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    computer_name = db.Column(db.String(50), nullable=False)
    disk = db.Column(db.String(50), nullable=False)
    temperature = db.Column(db.Float, nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)

    # Дополнительные параметры диска
    parameter_241 = db.Column(db.BigInteger, nullable=True)
    parameter_243 = db.Column(db.BigInteger, nullable=True)
    parameter_228 = db.Column(db.BigInteger, nullable=True)
    parameter_005 = db.Column(db.BigInteger, nullable=True)
    parameter_009 = db.Column(db.BigInteger, nullable=True)
    parameter_170 = db.Column(db.BigInteger, nullable=True)
    parameter_174 = db.Column(db.BigInteger, nullable=True)
    parameter_184 = db.Column(db.BigInteger, nullable=True)
    parameter_187 = db.Column(db.BigInteger, nullable=True)
    parameter_194 = db.Column(db.BigInteger, nullable=True)
    parameter_192 = db.Column(db.BigInteger, nullable=True)
    parameter_199 = db.Column(db.BigInteger, nullable=True)
    parameter_197 = db.Column(db.BigInteger, nullable=True)
    parameter_230 = db.Column(db.BigInteger, nullable=True)
    parameter_231 = db.Column(db.BigInteger, nullable=True)

    def __repr__(self):
        return f"<Temperature {self.computer_name} - {self.disk} - {self.temperature}°C>"

# Модель для хранения дополнительной информации по диску
class AdditionalInfo(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    computer_name = db.Column(db.String(50), nullable=False)
    disk = db.Column(db.String(50), nullable=False)
    realtbw = db.Column(db.BigInteger, nullable=True)
    comment = db.Column(db.Text, nullable=True)

# Маршрут для сохранения TBW
@app.route('/api/save-tbw/<computer_name>/<disk_name>', methods=['POST'])
def save_tbw(computer_name, disk_name):
    try:
        data = request.get_json()
        tbw = data.get('tbw')

        if tbw is None:
            return jsonify({"message": "TBW is required"}), 400

        # Обновление или создание записи AdditionalInfo
        additional_info = AdditionalInfo.query.filter_by(computer_name=computer_name, disk=disk_name).first()
        if additional_info:
            additional_info.realtbw = tbw
        else:
            additional_info = AdditionalInfo(computer_name=computer_name, disk=disk_name, realtbw=tbw)
            db.session.add(additional_info)

        db.session.commit()
        return jsonify({"message": "TBW updated successfully"}), 200
    except Exception as e:
        app.logger.error(f"Error updating TBW: {e}")
        return jsonify({"message": "Internal Server Error"}), 500

# Маршрут для сохранения комментария
@app.route('/api/save-comment/<computer_name>/<disk_name>', methods=['POST'])
def save_comment(computer_name, disk_name):
    try:
        data = request.get_json()
        comment = data.get('comment')

        if comment is None:
            return jsonify({"message": "Comment is required"}), 400

        additional_info = AdditionalInfo.query.filter_by(computer_name=computer_name, disk=disk_name).first()
        if additional_info:
            additional_info.comment = comment
        else:
            additional_info = AdditionalInfo(computer_name=computer_name, disk=disk_name, comment=comment)
            db.session.add(additional_info)

        db.session.commit()
        return jsonify({"message": "Comment updated successfully"}), 200
    except Exception as e:
        app.logger.error(f"Error updating comment: {e}")
        return jsonify({"message": "Internal Server Error"}), 500

# Маршрут для добавления температуры и параметров
@app.route('/temperatures', methods=['POST'])
def add_temperature():
    try:
        data = request.get_json()
        if not data:
            return jsonify({"message": "Invalid data"}), 400

        computer_name = data.get('computer_name')
        temperatures = data.get('temperatures')

        if not computer_name or not temperatures:
            return jsonify({"message": "Invalid data"}), 400

        for item in temperatures:
            disk = item['disk']
            new_temp = item['temperature']
            parameters = {k: (int(v) if v not in ["-", None] else None) for k, v in item.get('parameters', {}).items()}

            # Проверка на повторяющиеся записи в базе данных
            last_temp_record = Temperature.query.filter_by(computer_name=computer_name, disk=disk)\
                                                .order_by(Temperature.timestamp.desc()).first()

            if last_temp_record:
                time_diff = datetime.utcnow() - last_temp_record.timestamp
                temp_diff = abs(new_temp - last_temp_record.temperature)

                if time_diff < timedelta(minutes=1) and temp_diff > 20:
                    continue

            new_temp_record = Temperature(
                computer_name=computer_name,
                disk=disk,
                temperature=new_temp,
                parameter_241=parameters.get('241'),
                parameter_243=parameters.get('243'),
                parameter_228=parameters.get('228'),
                parameter_005=parameters.get('005'),
                parameter_009=parameters.get('009'),
                parameter_170=parameters.get('170'),
                parameter_174=parameters.get('174'),
                parameter_184=parameters.get('184'),
                parameter_187=parameters.get('187'),
                parameter_194=parameters.get('194'),
                parameter_192=parameters.get('192'),
                parameter_199=parameters.get('199'),
                parameter_197=parameters.get('197'),
                parameter_230=parameters.get('230'),
                parameter_231=parameters.get('231')
            )
            db.session.add(new_temp_record)
            db.session.commit()

        return jsonify({"message": "Данные успешно добавлены"}), 200
    except Exception as e:
        print(f"Ошибка при добавлении данных: {e}")
        return jsonify({"message": "Internal Server Error"}), 500

# Получение дополнительной информации по диску
@app.route('/api/additionalinfo/<computer_name>/<disk_name>', methods=['GET'])
def get_additional_info(computer_name, disk_name):
    try:
        additional_info = AdditionalInfo.query.filter_by(computer_name=computer_name, disk=disk_name).first()

        if additional_info:
            result = {"tbw": additional_info.realtbw, "comment": additional_info.comment}
        else:
            result = {"tbw": None, "comment": None}

        return jsonify(result)
    except Exception as e:
        print(f"Ошибка при получении дополнительных данных: {e}")
        return jsonify({"message": "Internal Server Error"}), 500

# Получение списка температур
@app.route('/api/temperatures', methods=['GET'])
def get_temperatures():
    try:
        page = int(request.args.get('page', 1))
        per_page = int(request.args.get('per_page', 50))
        offset = (page - 1) * per_page

        temperatures = Temperature.query.order_by(Temperature.timestamp.desc()).offset(offset).limit(per_page).all()

        result = [
            {
                "computer_name": temp.computer_name,
                "disk": temp.disk,
                "temperature": temp.temperature,
                "timestamp": temp.timestamp,
                "parameter_241": temp.parameter_241
            }
            for temp in temperatures
        ]
        return jsonify(result)
    except Exception as e:
        print(f"Ошибка при получении данных: {e}")
        return jsonify({"message": "Internal Server Error"}), 500

# Получение данных по последнему состоянию диска
@app.route('/api/disk/latest/<computer_name>/<disk_name>', methods=['GET'])
def get_latest_disk_data(computer_name, disk_name):
    try:
        latest_record = Temperature.query.filter_by(computer_name=computer_name, disk=disk_name)\
                                         .order_by(Temperature.timestamp.desc())\
                                         .first()

        if latest_record:
            result = {
                "timestamp": latest_record.timestamp,
                "temperature": latest_record.temperature,
                "parameter_241": latest_record.parameter_241,
                "parameter_243": latest_record.parameter_243,
                "parameter_228": latest_record.parameter_228,
                "parameter_005": latest_record.parameter_005,
                "parameter_009": latest_record.parameter_009,
                "parameter_170": latest_record.parameter_170,
                "parameter_174": latest_record.parameter_174,
                "parameter_184": latest_record.parameter_184,
                "parameter_187": latest_record.parameter_187,
                "parameter_194": latest_record.parameter_194,
                "parameter_192": latest_record.parameter_192,
                "parameter_199": latest_record.parameter_199,
                "parameter_197": latest_record.parameter_197,
                "parameter_230": latest_record.parameter_230,
                "parameter_231": latest_record.parameter_231
            }
            return jsonify([result])
        else:
            return jsonify([])  # Если данных нет, возвращаем пустой массив
    except Exception as e:
        print(f"Ошибка при получении данных для диска: {e}")
        return jsonify({"message": "Internal Server Error"}), 500

# Маршрут для parameter.html
@app.route('/api/disk/<computer_name>/<disk_name>/parameter/<parameter_name>', methods=['GET'])
def get_parameter_history(computer_name, disk_name, parameter_name):
    try:
        # Получаем параметры пагинации из запроса
        page = int(request.args.get('page', 1))
        per_page = int(request.args.get('length', 50))
        offset = (page - 1) * per_page

        # Динамически выбираем нужный параметр из базы данных
        query = Temperature.query.filter_by(computer_name=computer_name, disk=disk_name)\
                                 .order_by(Temperature.timestamp.desc())\
                                 .offset(offset)\
                                 .limit(per_page)

        total_records = Temperature.query.filter_by(computer_name=computer_name, disk=disk_name).count()

        # Собираем данные для указанного параметра
        parameter_data = []
        for record in query:
            value = getattr(record, parameter_name, None)  # Получаем значение параметра динамически
            parameter_data.append({
                "timestamp": record.timestamp,
                "value": value
            })

        return jsonify({
            "data": parameter_data,
            "recordsTotal": total_records,
            "recordsFiltered": total_records
        })
    except Exception as e:
        print(f"Ошибка при получении данных параметра: {e}")
        return jsonify({"message": "Internal Server Error"}), 500

# Маршрут для отображения главной страницы
@app.route('/')
def index():
    return render_template('index.html')

# Маршрут для отображения данных конкретного диска
@app.route('/disk/<computer_name>/<disk_name>')
def disk(computer_name, disk_name):
    return render_template('disk.html')

if __name__ == "__main__":
    try:
        with app.app_context():
            db.create_all()
            print("Таблицы проверены и созданы.")
    except Exception as e:
        print(f"Ошибка при создании таблиц: {e}")

    app.run(host='0.0.0.0', port=8000)
